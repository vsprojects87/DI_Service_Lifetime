refer timeframe : 04:55 dotnetmastery

1. we are creating three lifetime interfaces and implementing those in classes;
all of them have getGuid method which generate id

Interface :
  public interface ITransientGuidService
    {
        string GetGuid();
    }
Class :
public class TransientGuidService : ITransientGuidService
    {
        private readonly Guid Id;

        public TransientGuidService()
        {
            Id = Guid.NewGuid();
        }

        public string GetGuid()
        {
            return Id.ToString();
        }
    }

2. we are just getting ids generated by guid in contructor from 3 different Di lifetime classes which we have created
and with th help of user define get guid function shown above

3. we will register all three services in program.cs before appbuild
builder.Services.AddSingleton<ISingletonGuidService,SingletonGuidService>();
builder.Services.AddScoped<IScopedGuidService, ScopedGuidService>();
builder.Services.AddTransient<ITransientGuidService, TransientGuidService>();

var app = builder.Build();


4. after registering we will create the readonly field of interface type we have created in controller we can acess 
interface properties

        private readonly ISingletonGuidService _singleton1;
        private readonly ISingletonGuidService _singleton2;

        private readonly IScopedGuidService _scoped1;
        private readonly IScopedGuidService _scoped2;

        private readonly ITransientGuidService _transient1;
        private readonly ITransientGuidService _transient2;


5. after tgat we will create the parameter for accessing the interfaces and we will pass parameter to readonly fields
    
        public HomeController(IScopedGuidService scoped1,
                              IScopedGuidService scoped2,
                              ISingletonGuidService singleton1,
                              ISingletonGuidService singleton2,
                              ITransientGuidService transient1,
                              ITransientGuidService transient2)
        {
            _singleton1 = singleton1;
            _singleton2 = singleton2;
            _scoped1 = scoped1;
            _scoped2 = scoped2;
            _transient1 = transient1;
            _transient2 = transient2;
        }


6. In index we are we are calling the function with the helpof reference readonly field of the interface

        public IActionResult Index()
        {
            StringBuilder msg = new StringBuilder();
            msg.Append($"Transient 1 : {_transient1.GetGuid()} \n");
            msg.Append($"Transient 1 : {_transient2.GetGuid()} \n");
            msg.Append($"Scoped 1 : {_scoped1.GetGuid()} \n");
            msg.Append($"Scoped 2 : {_scoped2.GetGuid()} \n");
            msg.Append($"Singleton 1 : {_singleton1.GetGuid()} \n");
            msg.Append($"Singleton 2 : {_singleton2.GetGuid()} \n");
            return View(msg.ToString());
        }

7. Ignore the message, this is for not having to return view

8. refresh the page to see the working of DI lifetimes

9 Explaination :
    
    In singleton the single object will be created for every instance and for every request
    singleton1
    singleton2
    are the two instance of service we have injected , when we will refresh the page it sends request back so 
    for every request it will send same object throught the lifetime of page

    In Scoped it will send same object for both the instance per request , everytime we will refresh the page 
    it will create new object for both the instance of scoped

    Intransient it will created object for each instance and for every request, seperate object for both instance

    eg.if we are generating Guid Id on refresh then in DI lifecycle it will be like

    Request one/ on refreshing page send new request

    single : instance1 : 1
             instance2 : 1

    scoped : instance1 : 1
             instance2 : 1

    trans :  instance1 : 1
             instance2 : 2


     Request two

    single : instance1 : 1
             instance2 : 1

    scoped : instance1 : 2
             instance2 : 2

    trans :  instance1 : 3
             instance2 : 4


